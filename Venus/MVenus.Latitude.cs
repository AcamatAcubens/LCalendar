using Acamat.LCore;
using Acamat.LMath;
using System;

namespace Acamat.LCalendar;

/// <summary>
/// Bündelt Berechnungen zur Venus.
/// </summary>
public static partial class MVenus
{
	// ------------------- //
	// Felder und Methoden //
	// ------------------- //
	// MVenus.B0(EPrecision, double)
	/// <summary>
	/// Liefert die Summe der Terme 0. Ordnung zur Genauigkeitskennung und Jahrhundertbruchteil.
	/// </summary>
	/// <param name="value">Genauigkeitskennung.</param>
	/// <param name="t">Jahrhundertbruchteil.</param>
	/// <returns>Liefert die Summe der Terme 0. Ordnung.</returns>
	private static double B0(EPrecision value, double t)
	{
		// Lokale Felder einrichten
		double rtn = 0.0;

		// Terme aufsummieren
		rtn += 0.05923638472 * (0.26702775813 + 10213.28554621100 * t).Cos();
		if(value == EPrecision.Low)
			return rtn;
		rtn += 0.00040107978 * (1.14737178106 + 20426.57109242200 * t).Cos();
		rtn += 0.00032814918 * (3.14159265359 +     0.00000000000 * t).Cos();
		rtn += 0.00001011392 * (1.08946123021 + 30639.85663863300 * t).Cos();
		rtn += 0.00000149458 * (6.25390296069 + 18073.70493865020 * t).Cos();
		rtn += 0.00000137788 * (0.86020146523 +  1577.34354244780 * t).Cos();
		rtn += 0.00000129973 * (3.67152483651 +  9437.76293488700 * t).Cos();
		rtn += 0.00000119507 * (3.70468812804 +  2352.86615377180 * t).Cos();
		rtn += 0.00000107971 * (4.53903677647 + 22003.91463486980 * t).Cos();
		rtn += 0.00000092029 * (1.53954562706 +  9153.90361602180 * t).Cos();
		rtn += 0.00000052982 * (2.28138172277 +  5507.55323866740 * t).Cos();
		if(value == EPrecision.Medium)
			return rtn;
		rtn += 0.00000045617 * (0.72319641722 + 10239.58386601080 * t).Cos();
		rtn += 0.00000043491 * (6.14015776699 + 11790.62908865880 * t).Cos();
		rtn += 0.00000041700 * (5.99126845246 + 19896.88012732740 * t).Cos();
		rtn += 0.00000039644 * (3.86842095901 +  8635.94200376320 * t).Cos();
		rtn += 0.00000039175 * (3.94960351174 +   529.69096509460 * t).Cos();
		rtn += 0.00000038855 * (2.93437865147 + 10186.98722641120 * t).Cos();
		rtn += 0.00000033320 * (4.83194909595 + 14143.49524243060 * t).Cos();
		rtn += 0.00000023711 * (2.90646621218 + 10988.80815753500 * t).Cos();
		rtn += 0.00000023500 * (2.00770618322 + 13367.97263110660 * t).Cos();
		rtn += 0.00000021809 * (2.69701424951 + 19651.04848109800 * t).Cos();
		rtn += 0.00000020653 * (0.98666685459 +   775.52261132400 * t).Cos();
		rtn += 0.00000018579 * (1.80529277514 + 40853.14218484400 * t).Cos();
		rtn += 0.00000017835 * (5.96268643102 + 25934.12433108940 * t).Cos();
		rtn += 0.00000016976 * (4.13711782135 + 10021.83728009940 * t).Cos();
		rtn += 0.00000015407 * (3.29563855296 + 11015.10647733480 * t).Cos();
		rtn += 0.00000014949 * (5.61075168206 + 10404.73381232260 * t).Cos();
		rtn += 0.00000013129 * (5.70735942511 +  9683.59458111640 * t).Cos();
		rtn += 0.00000012936 * (5.42651448496 + 29580.47470844380 * t).Cos();
		rtn += 0.00000011962 * (3.57604253827 + 10742.97651130560 * t).Cos();
		rtn += 0.00000011827 * (1.19070919600 +  8624.21265092720 * t).Cos();
		rtn += 0.00000011466 * (5.12780364967 +  6283.07584999140 * t).Cos();
		rtn += 0.00000009763 * (0.14614896296 + 20618.01935853360 * t).Cos();
		rtn += 0.00000009484 * (2.75167834335 +   191.44826611160 * t).Cos();
		rtn += 0.00000008583 * (0.43182249199 +  9786.68735533500 * t).Cos();
		rtn += 0.00000008148 * (1.30548515603 + 15720.83878487840 * t).Cos();
		rtn += 0.00000006983 * (3.44920932146 + 17298.18232732620 * t).Cos();
		rtn += 0.00000006228 * (1.13312070908 + 29864.33402730900 * t).Cos();
		rtn += 0.00000006186 * (4.92498052443 + 19367.18916223280 * t).Cos();
		rtn += 0.00000006155 * (2.42413946900 +  4705.73230754360 * t).Cos();
		rtn += 0.00000006050 * (6.26541665966 + 11322.66409830440 * t).Cos();
		rtn += 0.00000006000 * (3.57639095526 +  3154.68708489560 * t).Cos();
		rtn += 0.00000005955 * (4.92235372433 +  1059.38193018920 * t).Cos();
		rtn += 0.00000005289 * (4.99182712443 +  7084.89678111520 * t).Cos();
		rtn += 0.00000005204 * (3.42528906628 +  9103.90699411760 * t).Cos();
		rtn += 0.00000004796 * (3.86676184909 +  7860.41939243920 * t).Cos();
		rtn += 0.00000004070 * (5.58798144740 + 12566.15169998280 * t).Cos();
		rtn += 0.00000003942 * (5.68758787835 + 10206.17199921020 * t).Cos();
		rtn += 0.00000003798 * (6.06410995916 + 10234.06094170340 * t).Cos();
		rtn += 0.00000003797 * (3.89520601076 + 10192.51015071860 * t).Cos();
		rtn += 0.00000003641 * (2.61501257205 + 15874.61759536320 * t).Cos();
		rtn += 0.00000003579 * (0.73789669235 +  4551.95349705880 * t).Cos();
		rtn += 0.00000003266 * (0.97517223854 + 23581.25817731760 * t).Cos();
		rtn += 0.00000003048 * (2.51085146990 + 33794.54372352860 * t).Cos();
		rtn += 0.00000002813 * (0.29951755546 +  9411.46461508720 * t).Cos();
		rtn += 0.00000002625 * (4.24272906574 +   213.29909543800 * t).Cos();
		rtn += 0.00000002593 * (5.73113176751 + 20213.27199698400 * t).Cos();
		rtn += 0.00000002559 * (4.58043833032 +   801.82093112380 * t).Cos();
		rtn += 0.00000002462 * (5.05790874754 + 29050.78374334920 * t).Cos();
		rtn += 0.00000002246 * (0.82112963936 + 28286.99048486120 * t).Cos();
		rtn += 0.00000002229 * (2.22457598233 + 10426.58464164900 * t).Cos();
		rtn += 0.00000002010 * (0.75702888128 +  9999.98645077300 * t).Cos();
		rtn += 0.00000001742 * (1.48394229233 +  7058.59846131540 * t).Cos();
		rtn += 0.00000001660 * (5.42775825275 + 32217.20018108080 * t).Cos();
		rtn += 0.00000001562 * (3.93962080463 + 37724.75341974820 * t).Cos();
		rtn += 0.00000001546 * (4.70759186462 + 14945.31617355440 * t).Cos();
		rtn += 0.00000001538 * (2.17309577080 + 21535.94964451540 * t).Cos();
		rtn += 0.00000001491 * (4.64883377941 +  1109.37855209340 * t).Cos();
		rtn += 0.00000001224 * (5.55090394449 +  5661.33204915220 * t).Cos();
		rtn += 0.00000001201 * (0.81913312536 +  8094.52168583260 * t).Cos();
		rtn += 0.00000001200 * (1.48282382657 +  9830.38901398780 * t).Cos();
		rtn += 0.00000001143 * (3.20596958337 +  3532.06069281140 * t).Cos();
		rtn += 0.00000001111 * (1.20276209213 +  9573.38825989700 * t).Cos();
		rtn += 0.00000001064 * (1.98891375536 +    26.29831979980 * t).Cos();
		rtn += 0.00000001047 * (4.56525030769 + 20419.45754542119 * t).Cos();
		rtn += 0.00000001044 * (1.98055689074 + 10596.18207843420 * t).Cos();
		rtn += 0.00000001041 * (5.38535116069 +     7.11354700080 * t).Cos();
		rtn += 0.00000001036 * (1.16719443387 +  8662.24032356300 * t).Cos();
		rtn += 0.00000001005 * (2.38429892132 + 27511.46787353720 * t).Cos();
		rtn += 0.00000000968 * (6.18496721871 + 25158.60171976540 * t).Cos();
		rtn += 0.00000000962 * (0.48573513747 + 23958.63178523340 * t).Cos();
		rtn += 0.00000000858 * (5.34692750735 + 41654.96311596780 * t).Cos();
		rtn += 0.00000000846 * (0.01566400887 +  3128.38876509580 * t).Cos();
		rtn += 0.00000000802 * (5.37234892520 + 10497.14486507620 * t).Cos();
		rtn += 0.00000000801 * (4.62406152514 +  9929.42622734580 * t).Cos();
		rtn += 0.00000000792 * (5.39686899735 + 24356.78078864160 * t).Cos();
		rtn += 0.00000000757 * (6.25904553773 + 20452.86941222180 * t).Cos();
		rtn += 0.00000000750 * (3.85219782842 + 21228.39202354580 * t).Cos();
		rtn += 0.00000000726 * (6.16683781802 + 18875.52586977400 * t).Cos();
		rtn += 0.00000000720 * (3.84286345199 + 10207.76262190360 * t).Cos();
		rtn += 0.00000000719 * (6.11596800207 + 10218.80847051840 * t).Cos();
		rtn += 0.00000000700 * (1.98097957188 +  3930.20969621960 * t).Cos();
		rtn += 0.00000000672 * (6.23429601219 + 14765.23904326980 * t).Cos();
		rtn += 0.00000000639 * (5.37566437358 +  1589.07289528380 * t).Cos();
		rtn += 0.00000000637 * (6.17053891156 + 10220.39909321180 * t).Cos();
		rtn += 0.00000000613 * (5.99731180690 +  4732.03062734340 * t).Cos();
		rtn += 0.00000000608 * (1.25236241968 + 10175.25787357520 * t).Cos();
		rtn += 0.00000000605 * (2.42330391120 + 10251.31321884680 * t).Cos();
		rtn += 0.00000000574 * (0.43813688572 + 17085.95866572220 * t).Cos();
		rtn += 0.00000000569 * (3.34601425125 +  3340.61242669980 * t).Cos();
		rtn += 0.00000000569 * (1.65498800378 + 39264.06928956020 * t).Cos();
		rtn += 0.00000000542 * (1.34665646732 + 29088.81141598500 * t).Cos();
		rtn += 0.00000000538 * (4.56198493922 + 10063.72234907640 * t).Cos();
		rtn += 0.00000000527 * (4.01994270827 + 18849.22754997420 * t).Cos();
		rtn += 0.00000000524 * (2.39794248670 + 26087.90314157420 * t).Cos();
		rtn += 0.00000000524 * (0.97991794166 + 30110.16567353840 * t).Cos();
		rtn += 0.00000000518 * (4.96996115446 + 30213.25844775700 * t).Cos();
		rtn += 0.00000000515 * (1.03001478293 + 22779.43724619380 * t).Cos();
		rtn += 0.00000000514 * (5.78413007838 + 12592.45001978260 * t).Cos();
		rtn += 0.00000000510 * (1.41065159851 +  9161.01716302260 * t).Cos();
		rtn += 0.00000000505 * (3.70047474212 + 20400.27277262220 * t).Cos();
		rtn += 0.00000000495 * (0.49175293655 + 45585.17281218740 * t).Cos();
		rtn += 0.00000000494 * (3.74345863918 + 31441.67756975680 * t).Cos();
		rtn += 0.00000000493 * (4.79939382739 +  9146.79006902100 * t).Cos();
		rtn += 0.00000000484 * (4.18538027381 + 14919.01785375460 * t).Cos();
		rtn += 0.00000000483 * (1.87898057316 + 51066.42773105500 * t).Cos();
		rtn += 0.00000000427 * (3.76876868949 + 11272.66747640020 * t).Cos();
		rtn += 0.00000000377 * (3.98143308775 + 21202.09370374600 * t).Cos();
		rtn += 0.00000000355 * (5.56672554631 + 18837.49819713819 * t).Cos();
		rtn += 0.00000000351 * (4.34026574490 + 10137.01947493540 * t).Cos();
		rtn += 0.00000000349 * (4.20550749672 + 20956.26205751660 * t).Cos();
		rtn += 0.00000000333 * (4.44969281739 + 28521.09277825460 * t).Cos();
		rtn += 0.00000000328 * (3.78427378910 +  6681.22485339960 * t).Cos();
		rtn += 0.00000000314 * (0.02584607093 + 13745.34623902240 * t).Cos();
		rtn += 0.00000000311 * (2.57334132897 + 20809.46762464520 * t).Cos();
		rtn += 0.00000000306 * (5.28903794869 +   382.89653222320 * t).Cos();
		rtn += 0.00000000296 * (2.83205515646 + 17277.40693183380 * t).Cos();
		rtn += 0.00000000294 * (0.75089224483 +  3149.16416058820 * t).Cos();
		rtn += 0.00000000286 * (5.16408902215 +   426.59819087600 * t).Cos();
		rtn += 0.00000000280 * (1.92925047377 + 49515.38250840700 * t).Cos();
		rtn += 0.00000000279 * (4.29871615943 + 19999.97290154599 * t).Cos();
		rtn += 0.00000000273 * (5.12740051559 + 35371.88726597640 * t).Cos();
		rtn += 0.00000000272 * (5.56183082489 + 16496.36139620240 * t).Cos();
		rtn += 0.00000000265 * (4.81168402147 + 20235.12282631040 * t).Cos();
		rtn += 0.00000000263 * (0.55328410985 + 36147.40987730040 * t).Cos();
		rtn += 0.00000000251 * (2.84739274245 + 33019.02111220460 * t).Cos();
		rtn += 0.00000000235 * (5.96522395118 + 10198.03307502600 * t).Cos();
		rtn += 0.00000000234 * (3.52866583267 + 10228.53801739600 * t).Cos();
		rtn += 0.00000000224 * (6.24561979789 +  7064.12138562280 * t).Cos();
		rtn += 0.00000000223 * (2.50591724074 + 26709.64694241340 * t).Cos();
		rtn += 0.00000000199 * (1.16433321880 + 22805.73556599360 * t).Cos();
		rtn += 0.00000000196 * (1.50610393790 + 31749.23519072640 * t).Cos();
		rtn += 0.00000000195 * (1.51901264131 + 43232.30665841560 * t).Cos();
		rtn += 0.00000000192 * (1.69321442572 + 13341.67431130680 * t).Cos();
		rtn += 0.00000000180 * (6.19353087076 + 39793.76025465480 * t).Cos();
		rtn += 0.00000000180 * (3.72646417141 +  1551.04522264800 * t).Cos();
		rtn += 0.00000000174 * (2.84049662693 +  9967.45389998160 * t).Cos();
		rtn += 0.00000000173 * (3.35235705827 + 53445.59220462660 * t).Cos();
		rtn += 0.00000000169 * (0.37000676558 + 10459.11719244040 * t).Cos();
		rtn += 0.00000000163 * (4.29160537719 + 36949.23080842420 * t).Cos();
		rtn += 0.00000000139 * (4.12576475427 + 36301.18868778519 * t).Cos();
		rtn += 0.00000000139 * (0.87847805052 + 16522.65971600220 * t).Cos();
		rtn += 0.00000000138 * (1.06919239240 + 65236.22129328540 * t).Cos();
		rtn += 0.00000000137 * (5.61149803116 + 10529.67741586760 * t).Cos();
		rtn += 0.00000000137 * (2.93350659460 + 47162.51635463520 * t).Cos();
		rtn += 0.00000000133 * (2.90682399304 +  9793.80090233580 * t).Cos();
		rtn += 0.00000000131 * (3.11317801589 +  9896.89367655440 * t).Cos();
		rtn += 0.00000000131 * (0.89697384735 +  3442.57494496540 * t).Cos();
		rtn += 0.00000000127 * (5.63110477712 + 10288.06714477830 * t).Cos();
		rtn += 0.00000000127 * (5.14447758616 +  5481.25491886760 * t).Cos();
		rtn += 0.00000000127 * (3.86278127025 + 10138.50394764370 * t).Cos();
		rtn += 0.00000000123 * (2.33714216061 + 10316.37832042960 * t).Cos();
		rtn += 0.00000000122 * (1.59017183044 + 10110.19277199240 * t).Cos();
		rtn += 0.00000000121 * (1.32802112907 + 38734.37832446560 * t).Cos();
		rtn += 0.00000000120 * (0.36076947165 +   536.80451209540 * t).Cos();
		rtn += 0.00000000115 * (3.76443612245 +   522.57741809380 * t).Cos();
		rtn += 0.00000000115 * (2.53355582059 + 26735.94526221320 * t).Cos();
		rtn += 0.00000000111 * (2.52077634760 + 13936.79450513400 * t).Cos();
		rtn += 0.00000000108 * (2.65839634325 + 10232.95530711079 * t).Cos();
		rtn += 0.00000000108 * (0.55230439694 + 10193.61578531121 * t).Cos();
		rtn += 0.00000000103 * (5.22683237620 +   103.09277421860 * t).Cos();
		rtn += 0.00000000101 * (3.17012502017 + 19317.19254032860 * t).Cos();
		rtn += 0.00000000101 * (0.83318284426 +  6489.77658728800 * t).Cos();
		rtn += 0.00000000097 * (0.77295091600 + 18307.80723204360 * t).Cos();
		rtn += 0.00000000096 * (1.52914774412 +  9690.70812811720 * t).Cos();
		rtn += 0.00000000095 * (5.03917884334 + 52175.80628314840 * t).Cos();
		rtn += 0.00000000094 * (0.71308489207 + 38500.27603107220 * t).Cos();
		rtn += 0.00000000094 * (0.17063414792 +  6872.67311951120 * t).Cos();
		rtn += 0.00000000092 * (5.46204624886 + 11764.33076885900 * t).Cos();
		rtn += 0.00000000091 * (2.48874147947 + 10846.06928552420 * t).Cos();
		rtn += 0.00000000090 * (2.12423586627 + 28313.28880466100 * t).Cos();
		rtn += 0.00000000090 * (0.39668501735 +  9580.50180689780 * t).Cos();
		rtn += 0.00000000089 * (2.53312656681 + 10735.86296430480 * t).Cos();
		rtn += 0.00000000085 * (3.82784790321 + 51868.24866217880 * t).Cos();
		rtn += 0.00000000082 * (0.85628515615 +  2379.16447357160 * t).Cos();
		rtn += 0.00000000081 * (5.25045057985 + 10419.47109464820 * t).Cos();
		rtn += 0.00000000081 * (2.26235214191 +  3903.91137641980 * t).Cos();
		rtn += 0.00000000080 * (5.62254102739 + 29999.95935231900 * t).Cos();
		rtn += 0.00000000080 * (4.23724598221 + 10007.09999777380 * t).Cos();
		rtn += 0.00000000075 * (2.27327165974 +  8521.11987670860 * t).Cos();
		rtn += 0.00000000075 * (0.36155638007 + 39302.09696219600 * t).Cos();
		rtn += 0.00000000074 * (6.02680095550 +  3723.50895892300 * t).Cos();
		rtn += 0.00000000068 * (2.71762936670 + 16983.99614745660 * t).Cos();
		rtn += 0.00000000066 * (2.24746237999 +    74.78159856730 * t).Cos();
		rtn += 0.00000000066 * (0.76731351736 +    20.77539549240 * t).Cos();
		rtn += 0.00000000064 * (5.83569051301 +  2118.76386037840 * t).Cos();
		rtn += 0.00000000061 * (3.40726181591 + 27490.69247804480 * t).Cos();
		rtn += 0.00000000060 * (5.89661892920 + 41962.52073693740 * t).Cos();
		rtn += 0.00000000058 * (2.98524209824 + 19889.76658032659 * t).Cos();
		rtn += 0.00000000058 * (2.14482855875 +  8631.32619792800 * t).Cos();
		rtn += 0.00000000057 * (2.30081371235 + 20529.66386664059 * t).Cos();
		rtn += 0.00000000055 * (4.70485939861 +   639.89728631400 * t).Cos();
		rtn += 0.00000000054 * (5.89684197257 + 19903.99367432819 * t).Cos();
		rtn += 0.00000000054 * (1.78260668333 + 40077.61957352000 * t).Cos();
		rtn += 0.00000000052 * (4.76610409132 + 57375.80190084620 * t).Cos();
		rtn += 0.00000000052 * (2.37192464233 + 29573.36116144300 * t).Cos();
		rtn += 0.00000000051 * (5.29186795569 + 29587.58825544460 * t).Cos();
		rtn += 0.00000000051 * (3.07811180039 + 24150.08005134500 * t).Cos();
		return rtn;
	}

	// MVenus.B1(EPrecision, double)
	/// <summary>
	/// Liefert die Summe der Terme 1. Ordnung zur Genauigkeitskennung und Jahrhundertbruchteil.
	/// </summary>
	/// <param name="value">Genauigkeitskennung.</param>
	/// <param name="t">Jahrhundertbruchteil.</param>
	/// <returns>Liefert die Summe der Terme 1. Ordnung.</returns>
	private static double B1(EPrecision value, double t)
	{
		// Lokale Felder einrichten
		double rtn = 0.0;

		// Terme aufsummieren
		rtn += 0.00513347602 * (1.80364310797 + 10213.28554621100 * t).Cos();
		if(value == EPrecision.Low)
			return rtn;
		rtn += 0.00004380100 * (3.38615711591 + 20426.57109242200 * t).Cos();
		rtn += 0.00000199162 * (0.00000000000 +     0.00000000000 * t).Cos();
		rtn += 0.00000196586 * (2.53001197486 + 30639.85663863300 * t).Cos();
		if(value == EPrecision.Medium)
			return rtn;
		rtn += 0.00000014031 * (2.27087044687 +  9437.76293488700 * t).Cos();
		rtn += 0.00000012958 * (1.50735622957 + 18073.70493865020 * t).Cos();
		rtn += 0.00000011941 * (5.60462450426 +  1577.34354244780 * t).Cos();
		rtn += 0.00000010324 * (5.24224313355 +  2352.86615377180 * t).Cos();
		rtn += 0.00000009294 * (6.07545631303 + 22003.91463486980 * t).Cos();
		rtn += 0.00000008031 * (0.29371105198 +  9153.90361602180 * t).Cos();
		rtn += 0.00000007514 * (5.08081885990 + 10186.98722641120 * t).Cos();
		rtn += 0.00000007441 * (1.50257909439 + 11790.62908865880 * t).Cos();
		rtn += 0.00000004669 * (3.87801635015 + 10239.58386601080 * t).Cos();
		rtn += 0.00000004657 * (0.75073886819 +  5507.55323866740 * t).Cos();
		rtn += 0.00000004399 * (3.58872736593 + 40853.14218484400 * t).Cos();
		rtn += 0.00000003975 * (1.28397121206 + 10404.73381232260 * t).Cos();
		rtn += 0.00000003783 * (4.33004753984 + 19651.04848109800 * t).Cos();
		rtn += 0.00000003555 * (1.25927550356 + 19896.88012732740 * t).Cos();
		rtn += 0.00000003479 * (5.50797002160 +   529.69096509460 * t).Cos();
		rtn += 0.00000003390 * (4.88976070903 + 10988.80815753500 * t).Cos();
		rtn += 0.00000002884 * (0.08549582037 + 14143.49524243060 * t).Cos();
		rtn += 0.00000001786 * (0.37134513186 + 13367.97263110660 * t).Cos();
		rtn += 0.00000001600 * (1.68378002982 + 20618.01935853360 * t).Cos();
		rtn += 0.00000001539 * (1.21683853657 + 25934.12433108940 * t).Cos();
		rtn += 0.00000001341 * (2.90077139758 + 15720.83878487840 * t).Cos();
		rtn += 0.00000001165 * (6.13437155401 +  7860.41939243920 * t).Cos();
		rtn += 0.00000001115 * (0.66743690380 + 29580.47470844380 * t).Cos();
		rtn += 0.00000000993 * (1.74681248965 + 11322.66409830440 * t).Cos();
		rtn += 0.00000000991 * (0.55319879330 + 19367.18916223280 * t).Cos();
		rtn += 0.00000000973 * (0.39071758442 +  6283.07584999140 * t).Cos();
		rtn += 0.00000000965 * (1.36425494833 +  9683.59458111640 * t).Cos();
		rtn += 0.00000000923 * (2.25384969096 + 10021.83728009940 * t).Cos();
		rtn += 0.00000000913 * (0.76046003719 +  8635.94200376320 * t).Cos();
		rtn += 0.00000000805 * (0.53331923557 +  8624.21265092720 * t).Cos();
		rtn += 0.00000000609 * (2.62364470139 + 23581.25817731760 * t).Cos();
		rtn += 0.00000000532 * (5.10925676528 +  9786.68735533500 * t).Cos();
		rtn += 0.00000000503 * (2.65840772485 + 29864.33402730900 * t).Cos();
		rtn += 0.00000000478 * (3.94100005156 +   775.52261132400 * t).Cos();
		rtn += 0.00000000477 * (3.71554345922 + 10596.18207843420 * t).Cos();
		rtn += 0.00000000476 * (6.17672999981 + 11015.10647733480 * t).Cos();
		rtn += 0.00000000472 * (1.69672629200 + 17298.18232732620 * t).Cos();
		rtn += 0.00000000458 * (2.31894399069 +  9999.98645077300 * t).Cos();
		rtn += 0.00000000456 * (5.01205315518 + 10742.97651130560 * t).Cos();
		rtn += 0.00000000440 * (4.33400244581 + 15874.61759536320 * t).Cos();
		rtn += 0.00000000374 * (3.76878356974 + 21228.39202354580 * t).Cos();
		rtn += 0.00000000349 * (1.31468836511 + 10234.06094170340 * t).Cos();
		rtn += 0.00000000347 * (2.34551062680 +  9411.46461508720 * t).Cos();
		rtn += 0.00000000346 * (0.94242286364 +  1059.38193018920 * t).Cos();
		rtn += 0.00000000331 * (4.89498986674 + 10206.17199921020 * t).Cos();
		rtn += 0.00000000310 * (5.45422332781 + 10192.51015071860 * t).Cos();
		rtn += 0.00000000308 * (4.90145899142 +  3930.20969621960 * t).Cos();
		rtn += 0.00000000290 * (0.10953964861 + 29050.78374334920 * t).Cos();
		rtn += 0.00000000283 * (6.12133736787 + 20419.45754542119 * t).Cos();
		rtn += 0.00000000269 * (2.39650266204 +   801.82093112380 * t).Cos();
		rtn += 0.00000000269 * (0.00589873499 +  9830.38901398780 * t).Cos();
		rtn += 0.00000000265 * (4.02431894973 + 33794.54372352860 * t).Cos();
		rtn += 0.00000000261 * (3.48196147279 +  7058.59846131540 * t).Cos();
		rtn += 0.00000000247 * (3.07626728158 + 28286.99048486120 * t).Cos();
		rtn += 0.00000000232 * (3.07845850030 + 12566.15169998280 * t).Cos();
		rtn += 0.00000000225 * (5.76888896320 +   213.29909543800 * t).Cos();
		rtn += 0.00000000220 * (2.37315851889 +  4551.95349705880 * t).Cos();
		rtn += 0.00000000217 * (0.88382111135 + 20213.27199698400 * t).Cos();
		rtn += 0.00000000202 * (3.56872121409 + 21535.94964451540 * t).Cos();
		rtn += 0.00000000195 * (5.47240855400 + 37724.75341974820 * t).Cos();
		rtn += 0.00000000174 * (1.33676849359 + 32217.20018108080 * t).Cos();
		rtn += 0.00000000172 * (6.13435208788 + 18837.49819713819 * t).Cos();
		rtn += 0.00000000172 * (6.12653050186 +  9161.01716302260 * t).Cos();
		rtn += 0.00000000164 * (3.30849473132 + 51066.42773105500 * t).Cos();
		rtn += 0.00000000163 * (5.45519134760 + 10426.58464164900 * t).Cos();
		rtn += 0.00000000157 * (5.98474214437 +    26.29831979980 * t).Cos();
		rtn += 0.00000000157 * (5.44507403858 +  4705.73230754360 * t).Cos();
		rtn += 0.00000000153 * (4.07656151671 + 27511.46787353720 * t).Cos();
		rtn += 0.00000000146 * (4.69869606856 + 25158.60171976540 * t).Cos();
		rtn += 0.00000000139 * (4.42330401713 + 10220.39909321180 * t).Cos();
		rtn += 0.00000000133 * (1.78047296245 +   191.44826611160 * t).Cos();
		rtn += 0.00000000131 * (1.51959002513 + 10218.80847051840 * t).Cos();
		rtn += 0.00000000129 * (2.08748660996 +  3128.38876509580 * t).Cos();
		rtn += 0.00000000126 * (2.62296638037 + 22779.43724619380 * t).Cos();
		rtn += 0.00000000117 * (6.18296175153 + 20400.27277262220 * t).Cos();
		rtn += 0.00000000117 * (0.14681677884 +  9146.79006902100 * t).Cos();
		rtn += 0.00000000116 * (0.61940521198 + 41654.96311596780 * t).Cos();
		rtn += 0.00000000113 * (3.64412860654 +     7.11354700080 * t).Cos();
		rtn += 0.00000000109 * (5.21220660788 +  8662.24032356300 * t).Cos();
		rtn += 0.00000000096 * (1.49631428731 +  7084.89678111520 * t).Cos();
		rtn += 0.00000000096 * (1.21744230443 + 10198.03307502600 * t).Cos();
		rtn += 0.00000000093 * (1.85466268819 + 45585.17281218740 * t).Cos();
		rtn += 0.00000000089 * (0.64100435648 +  3154.68708489560 * t).Cos();
		rtn += 0.00000000085 * (6.04057728058 + 21202.09370374600 * t).Cos();
		rtn += 0.00000000083 * (0.19985600927 + 14919.01785375460 * t).Cos();
		rtn += 0.00000000082 * (1.45863866349 + 10207.76262190360 * t).Cos();
		rtn += 0.00000000077 * (5.50132310610 +  5661.33204915220 * t).Cos();
		rtn += 0.00000000077 * (2.00173927326 + 10228.53801739600 * t).Cos();
		rtn += 0.00000000077 * (1.85516358950 +  3532.06069281140 * t).Cos();
		rtn += 0.00000000072 * (2.35312965005 +  9103.90699411760 * t).Cos();
		rtn += 0.00000000067 * (1.42090542131 + 24356.78078864160 * t).Cos();
		rtn += 0.00000000066 * (3.25826124156 +  1109.37855209340 * t).Cos();
		rtn += 0.00000000062 * (0.81341290651 +   382.89653222320 * t).Cos();
		rtn += 0.00000000061 * (3.80043027736 + 11272.66747640020 * t).Cos();
		rtn += 0.00000000061 * (3.27309494322 + 49515.38250840700 * t).Cos();
		rtn += 0.00000000058 * (6.20761936031 + 29088.81141598500 * t).Cos();
		rtn += 0.00000000056 * (2.97733070198 + 30110.16567353840 * t).Cos();
		rtn += 0.00000000053 * (3.21969389511 + 20452.86941222180 * t).Cos();
		rtn += 0.00000000051 * (4.22406663447 + 20809.46762464520 * t).Cos();
		rtn += 0.00000000050 * (4.16651052942 + 13341.67431130680 * t).Cos();
		return rtn;
	}

	// MVenus.B2(EPrecision, double)
	/// <summary>
	/// Liefert die Summe der Terme 2. Ordnung zur Genauigkeitskennung und Jahrhundertbruchteil.
	/// </summary>
	/// <param name="value">Genauigkeitskennung.</param>
	/// <param name="t">Jahrhundertbruchteil.</param>
	/// <returns>Liefert die Summe der Terme 2. Ordnung.</returns>
	private static double B2(EPrecision value, double t)
	{
		// Lokale Felder einrichten
		double rtn = 0.0;
		if(value == EPrecision.Low)
			return rtn;

		// Terme aufsummieren
		rtn += 0.00022377665 * (3.38509143877 + 10213.28554621100 * t).Cos();
		rtn += 0.00000281739 * (0.00000000000 +     0.00000000000 * t).Cos();
		rtn += 0.00000173164 * (5.25563766915 + 20426.57109242200 * t).Cos();
		if(value == EPrecision.Medium)
			return rtn;
		rtn += 0.00000026945 * (3.87040891568 + 30639.85663863300 * t).Cos();
		rtn += 0.00000001174 * (0.09768632072 + 10186.98722641120 * t).Cos();
		rtn += 0.00000000788 * (4.36515965295 + 10239.58386601080 * t).Cos();
		rtn += 0.00000000685 * (3.19139067811 + 11790.62908865880 * t).Cos();
		rtn += 0.00000000592 * (5.22270440328 + 40853.14218484400 * t).Cos();
		rtn += 0.00000000540 * (3.11657836329 + 18073.70493865020 * t).Cos();
		rtn += 0.00000000538 * (0.57550272342 +  2352.86615377180 * t).Cos();
		rtn += 0.00000000515 * (6.12821215207 + 10988.80815753500 * t).Cos();
		rtn += 0.00000000454 * (2.79306867629 + 10404.73381232260 * t).Cos();
		rtn += 0.00000000431 * (4.00778431184 +  1577.34354244780 * t).Cos();
		rtn += 0.00000000375 * (1.31319959789 + 22003.91463486980 * t).Cos();
		rtn += 0.00000000374 * (6.10468482446 +  9437.76293488700 * t).Cos();
		rtn += 0.00000000360 * (6.01747842320 + 19651.04848109800 * t).Cos();
		rtn += 0.00000000354 * (5.12509281266 +  9153.90361602180 * t).Cos();
		rtn += 0.00000000164 * (5.41790158607 +  5507.55323866740 * t).Cos();
		rtn += 0.00000000159 * (2.78191550878 + 19896.88012732740 * t).Cos();
		rtn += 0.00000000157 * (0.65774905071 +   529.69096509460 * t).Cos();
		rtn += 0.00000000155 * (2.54824315372 +  9683.59458111640 * t).Cos();
		rtn += 0.00000000150 * (4.58623687118 + 15720.83878487840 * t).Cos();
		rtn += 0.00000000128 * (5.32400510939 + 13367.97263110660 * t).Cos();
		rtn += 0.00000000115 * (3.23636374193 + 20618.01935853360 * t).Cos();
		rtn += 0.00000000109 * (2.01866665583 + 14143.49524243060 * t).Cos();
		rtn += 0.00000000106 * (2.28289033017 +  6283.07584999140 * t).Cos();
		rtn += 0.00000000090 * (5.23585072275 + 10596.18207843420 * t).Cos();
		rtn += 0.00000000087 * (3.28265082435 + 11322.66409830440 * t).Cos();
		rtn += 0.00000000055 * (4.82369879741 +  7058.59846131540 * t).Cos();
		return rtn;
	}

	// MVenus.B3(EPrecision, double)
	/// <summary>
	/// Liefert die Summe der Terme 3. Ordnung zur Genauigkeitskennung und Jahrhundertbruchteil.
	/// </summary>
	/// <param name="value">Genauigkeitskennung.</param>
	/// <param name="t">Jahrhundertbruchteil.</param>
	/// <returns>Liefert die Summe der Terme 3. Ordnung.</returns>
	private static double B3(EPrecision value, double t)
	{
		// Lokale Felder einrichten
		double rtn = 0.0;
		if(value == EPrecision.Low)
			return rtn;

		// Terme aufsummieren
		rtn += 0.00000646671 * (4.99166565277 + 10213.28554621100 * t).Cos();
		if(value == EPrecision.Medium)
			return rtn;
		rtn += 0.00000019952 * (3.14159265359 +     0.00000000000 * t).Cos();
		rtn += 0.00000005540 * (0.77376923951 + 20426.57109242200 * t).Cos();
		rtn += 0.00000002526 * (5.44493763020 + 30639.85663863300 * t).Cos();
		rtn += 0.00000000079 * (1.51447613604 + 10186.98722641120 * t).Cos();
		rtn += 0.00000000058 * (5.70731176550 + 10239.58386601080 * t).Cos();
		rtn += 0.00000000056 * (0.63647808442 + 40853.14218484400 * t).Cos();
		return rtn;
	}

	// MVenus.B4(EPrecision, double)
	/// <summary>
	/// Liefert die Summe der Terme 4. Ordnung zur Genauigkeitskennung und Jahrhundertbruchteil.
	/// </summary>
	/// <param name="value">Genauigkeitskennung.</param>
	/// <param name="t">Jahrhundertbruchteil.</param>
	/// <returns>Liefert die Summe der Terme 4. Ordnung.</returns>
	private static double B4(EPrecision value, double t)
	{
		// Lokale Felder einrichten
		double rtn = 0.0;
		if(value == EPrecision.Low)
			return rtn;
		if(value == EPrecision.Medium)
			return rtn;

		// Terme aufsummieren
		rtn += 0.00000014102 * (0.31537190181 + 10213.28554621100 * t).Cos();
		rtn += 0.00000000214 * (3.14159265359 +     0.00000000000 * t).Cos();
		rtn += 0.00000000190 * (2.35466404492 + 20426.57109242200 * t).Cos();
		rtn += 0.00000000164 * (0.74476215141 + 30639.85663863300 * t).Cos();
		return rtn;
	}

	// MVenus.B5(EPrecision, double)
	/// <summary>
	/// Liefert die Summe der Terme 5. Ordnung zur Genauigkeitskennung und Jahrhundertbruchteil.
	/// </summary>
	/// <param name="value">Genauigkeitskennung.</param>
	/// <param name="t">Jahrhundertbruchteil.</param>
	/// <returns>Liefert die Summe der Terme 5. Ordnung.</returns>
	private static double B5(EPrecision value, double t)
	{
		// Lokale Felder einrichten
		double rtn = 0.0;
		if(value == EPrecision.Low)
			return rtn;
		if(value == EPrecision.Medium)
			return rtn;

		// Terme aufsummieren
		rtn += 0.00000000239 * (2.05201727566 + 10213.28554621100 * t).Cos();
		return rtn;
	}

	// MVenus.Latitude(EPrecision)
	/// <summary>
	/// Liefert die heliozentrisch-ekliptikale Breite zur aktuellen Systemzeit.
	/// </summary>
	/// <param name="value">Genauigkeitskennung.</param>
	/// <returns>Heliozentrisch-ekliptikale Breite zur aktuellen Systemzeit.</returns>
	public static double Latitude(EPrecision value)
	{
		// Lokale Felder einrichten
		double jd = DateTime.Now.ToJdn();
		return MVenus.Latitude(value, jd);
	}

	// MVenus.Latitude(EPrecision, double)
	/// <summary>
	/// Liefert die heliozentrisch-ekliptikale Breite zur julianischen Tageszahl.
	/// </summary>
	/// <param name="value">Genauigkeitskennung.</param>
	/// <param name="jd">Julianische Tageszahl.</param>
	/// <returns>Heliozentrisch-ekliptikale Breite zur julianischen Tageszahl.</returns>
	public static double Latitude(EPrecision value, double jd)
	{
		// Lokale Felder einrichten
		double t  = (jd - MCalendar.Jdn20000101) / 365250.0; // Jahrhundertbruchteil
		double b0 = MVenus.B0(value, t);
		double b1 = MVenus.B1(value, t);
		double b2 = MVenus.B2(value, t);
		double b3 = MVenus.B3(value, t);
		double b4 = MVenus.B4(value, t);
		double b5 = MVenus.B5(value, t);

		// Breite berechnen
		return MMath.Polynome(t, b0, b1, b2, b3, b4, b5);
	}
}
