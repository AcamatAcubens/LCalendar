using Acamat.LCore;
using Acamat.LMath;
using System;

namespace Acamat.LCalendar;

/// <summary>
/// Bündelt Berechnungen zum Uranus.
/// </summary>
public static partial class MUranus
{
	// ------------------- //
	// Felder und Methoden //
	// ------------------- //
	// MUranus.B0(EPrecision, double)
	/// <summary>
	/// Liefert die Summe der Terme 0. Ordnung zur Genauigkeitskennung und Jahrhundertbruchteil.
	/// </summary>
	/// <param name="value">Genauigkeitskennung.</param>
	/// <param name="t">Jahrhundertbruchteil.</param>
	/// <returns>Liefert die Summe der Terme 0. Ordnung.</returns>
	private static double B0(EPrecision value, double t)
	{
		// Lokale Felder einrichten
		double rtn = 0.0;

		// Terme aufsummieren
		rtn += 0.01346277639 * (2.61877810545 +   74.78159856730 * t).Cos();
		rtn += 0.00062341405 * (5.08111175856 +  149.56319713460 * t).Cos();
		rtn += 0.00061601203 * (3.14159265359 +    0.00000000000 * t).Cos();
		if(value == EPrecision.Low)
			return rtn;
		rtn += 0.00009963744 * (1.61603876357 +   76.26607127560 * t).Cos();
		rtn += 0.00009926151 * (0.57630387917 +   73.29712585900 * t).Cos();
		rtn += 0.00003259455 * (1.26119385960 +  224.34479570190 * t).Cos();
		rtn += 0.00002972318 * (2.24367035538 +    1.48447270830 * t).Cos();
		rtn += 0.00002010257 * (6.05550401088 +  148.07872442630 * t).Cos();
		rtn += 0.00001522172 * (0.27960386377 +   63.73589830340 * t).Cos();
		rtn += 0.00000924055 * (4.03822927853 +  151.04766984290 * t).Cos();
		rtn += 0.00000760624 * (6.14000431923 +   71.81265315070 * t).Cos();
		rtn += 0.00000522309 * (3.32085194770 +  138.51749687070 * t).Cos();
		rtn += 0.00000462630 * (0.74256727574 +   85.82729883120 * t).Cos();
		rtn += 0.00000436843 * (3.38082524317 +  529.69096509460 * t).Cos();
		rtn += 0.00000434625 * (0.34065281858 +   77.75054398390 * t).Cos();
		rtn += 0.00000430668 * (3.55445034854 +  213.29909543800 * t).Cos();
		rtn += 0.00000420265 * (5.21279984788 +   11.04570026390 * t).Cos();
		rtn += 0.00000244698 * (0.78795150326 +    2.96894541660 * t).Cos();
		rtn += 0.00000232649 * (2.25716421383 +  222.86032299360 * t).Cos();
		rtn += 0.00000215838 * (1.59121704940 +   38.13303563780 * t).Cos();
		rtn += 0.00000179935 * (3.72487952673 +  299.12639426920 * t).Cos();
		rtn += 0.00000174895 * (1.23550262213 +  146.59425171800 * t).Cos();
		rtn += 0.00000173667 * (1.93654269131 +  380.12776796000 * t).Cos();
		rtn += 0.00000160368 * (5.33635436463 +  111.43016149680 * t).Cos();
		rtn += 0.00000144064 * (5.96239326415 +   35.16409022120 * t).Cos();
		rtn += 0.00000116363 * (5.73877190007 +   70.84944530420 * t).Cos();
		rtn += 0.00000106441 * (0.94103112994 +   70.32818044240 * t).Cos();
		rtn += 0.00000102049 * (2.61876256513 +   78.71375183040 * t).Cos();
		rtn += 0.00000086163 * (0.70262506622 +   39.61750834610 * t).Cos();
		rtn += 0.00000072617 * (0.20564696113 +  225.82926841020 * t).Cos();
		rtn += 0.00000071172 * (0.83343269975 +  109.94568878850 * t).Cos();
		rtn += 0.00000057502 * (2.67039425415 +  108.46121608020 * t).Cos();
		rtn += 0.00000054255 * (3.35166579613 +  184.72728735580 * t).Cos();
		if(value == EPrecision.Medium)
			return rtn;
		rtn += 0.00000044470 * (2.74408231138 +  152.53214255120 * t).Cos();
		rtn += 0.00000041346 * (3.22134319551 +  160.60889739850 * t).Cos();
		rtn += 0.00000039157 * (2.17108251341 +  351.81659230870 * t).Cos();
		rtn += 0.00000038591 * (5.17394663303 +  202.25339517410 * t).Cos();
		rtn += 0.00000037336 * (4.02053241202 +   52.69019803950 * t).Cos();
		rtn += 0.00000035140 * (4.00111634363 +  112.91463420510 * t).Cos();
		rtn += 0.00000033073 * (3.61378095742 +  221.37585028530 * t).Cos();
		rtn += 0.00000032028 * (1.29160071142 +  145.63104387150 * t).Cos();
		rtn += 0.00000031315 * (2.71969470781 +  145.10977900970 * t).Cos();
		rtn += 0.00000027574 * (3.70064266960 +   36.64856292950 * t).Cos();
		rtn += 0.00000024635 * (1.11645461259 +    3.93215326310 * t).Cos();
		rtn += 0.00000024315 * (5.48987913644 +   79.23501669220 * t).Cos();
		rtn += 0.00000024277 * (2.84989187496 +  127.47179660680 * t).Cos();
		rtn += 0.00000022373 * (5.73687615457 +    4.45341812490 * t).Cos();
		rtn += 0.00000021418 * (0.63722900407 +  277.03499374140 * t).Cos();
		rtn += 0.00000021348 * (1.01350946382 +   33.67961751290 * t).Cos();
		rtn += 0.00000020299 * (1.06070151806 +  454.90936652730 * t).Cos();
		rtn += 0.00000019826 * (2.59334182230 +   84.34282612290 * t).Cos();
		rtn += 0.00000019789 * (4.72260849557 +  297.64192156090 * t).Cos();
		rtn += 0.00000019768 * (5.77906142568 +  305.34616939270 * t).Cos();
		rtn += 0.00000019137 * (1.30214105578 +   62.25142559510 * t).Cos();
		rtn += 0.00000016000 * (1.95535748902 +  186.21176006410 * t).Cos();
		rtn += 0.00000015142 * (2.91786832554 +  426.59819087600 * t).Cos();
		rtn += 0.00000013819 * (2.67163927171 +   74.66972398270 * t).Cos();
		rtn += 0.00000013803 * (5.70712120608 +   74.89347315190 * t).Cos();
		rtn += 0.00000012093 * (2.53736362742 +    9.56122755560 * t).Cos();
		rtn += 0.00000011838 * (5.96756415681 +   87.31177153950 * t).Cos();
		rtn += 0.00000011463 * (5.73391138419 +   41.10198105440 * t).Cos();
		rtn += 0.00000011450 * (3.98177764866 +  106.97674337190 * t).Cos();
		rtn += 0.00000011352 * (2.12645777694 +   68.84370773410 * t).Cos();
		rtn += 0.00000010741 * (3.73401569675 + 1059.38193018920 * t).Cos();
		rtn += 0.00000010553 * (3.78602881738 +  490.33408917940 * t).Cos();
		rtn += 0.00000010360 * (4.75567608732 +  183.24281464750 * t).Cos();
		rtn += 0.00000010232 * (6.18772866993 +  373.90799283650 * t).Cos();
		rtn += 0.00000010107 * (0.92911975959 +   65.22037101170 * t).Cos();
		rtn += 0.00000010030 * (1.74828757238 +   22.09140052780 * t).Cos();
		rtn += 0.00000009978 * (5.83600622359 +  604.47256366190 * t).Cos();
		rtn += 0.00000009127 * (5.11093790809 +  153.49535039770 * t).Cos();
		rtn += 0.00000008646 * (4.18351923569 +   12.53017297220 * t).Cos();
		rtn += 0.00000008472 * (3.36885457285 +   72.33391801250 * t).Cos();
		rtn += 0.00000008302 * (5.19247905162 +   77.22927912210 * t).Cos();
		rtn += 0.00000007797 * (5.11771906359 +   77.96299230500 * t).Cos();
		rtn += 0.00000007696 * (3.25189037096 +   71.60020482960 * t).Cos();
		rtn += 0.00000007513 * (2.98265970100 +  114.39910691340 * t).Cos();
		rtn += 0.00000006947 * (3.31871016057 +   56.62235130260 * t).Cos();
		rtn += 0.00000006772 * (4.09374798222 +  137.03302416240 * t).Cos();
		rtn += 0.00000006490 * (0.88434578474 +  288.08069400530 * t).Cos();
		rtn += 0.00000006419 * (0.44895727879 +  140.00196957900 * t).Cos();
		rtn += 0.00000006394 * (3.51142812432 +  220.41264243880 * t).Cos();
		rtn += 0.00000006211 * (0.58222518453 +  340.77089204480 * t).Cos();
		rtn += 0.00000005692 * (3.76563463180 +   67.66805156650 * t).Cos();
		rtn += 0.00000005595 * (5.68643434536 +  259.50888592310 * t).Cos();
		rtn += 0.00000005309 * (2.65421183211 +  300.61086697750 * t).Cos();
		rtn += 0.00000004975 * (4.06722486039 +  143.62530630140 * t).Cos();
		rtn += 0.00000004950 * (4.99672086239 +  219.89137757700 * t).Cos();
		rtn += 0.00000004853 * (2.03383592524 +  415.55249061210 * t).Cos();
		rtn += 0.00000003943 * (4.95136058926 +  265.98929347750 * t).Cos();
		rtn += 0.00000003812 * (3.10475682509 +  181.75834193920 * t).Cos();
		rtn += 0.00000003807 * (2.24787582155 +  909.81873305460 * t).Cos();
		rtn += 0.00000003796 * (1.26231186682 +   75.30286342910 * t).Cos();
		rtn += 0.00000003764 * (5.20052090560 +  227.31374111850 * t).Cos();
		rtn += 0.00000003747 * (0.82999983666 +   74.26033370550 * t).Cos();
		rtn += 0.00000003517 * (5.44397685665 +  628.85158605010 * t).Cos();
		rtn += 0.00000003472 * (0.34737998380 +  131.40394986990 * t).Cos();
		rtn += 0.00000003445 * (5.91769433069 +  296.15744885260 * t).Cos();
		rtn += 0.00000003390 * (0.53497504164 +  206.18554843720 * t).Cos();
		rtn += 0.00000003303 * (2.09359507373 +   73.81839072080 * t).Cos();
		rtn += 0.00000003285 * (0.00780313833 +   75.74480641380 * t).Cos();
		rtn += 0.00000003190 * (5.68929316349 +  235.39049596580 * t).Cos();
		rtn += 0.00000003069 * (4.49065085092 +   66.70484372000 * t).Cos();
		rtn += 0.00000003038 * (4.68314286209 +  159.12442469020 * t).Cos();
		rtn += 0.00000002917 * (4.21615078632 +  258.02441321480 * t).Cos();
		rtn += 0.00000002814 * (3.96708337625 +   82.85835341460 * t).Cos();
		rtn += 0.00000002643 * (3.96832729680 +  381.61224066830 * t).Cos();
		rtn += 0.00000002635 * (0.53987945692 +  211.81462272970 * t).Cos();
		rtn += 0.00000002633 * (2.28385552693 +   32.19514480460 * t).Cos();
		rtn += 0.00000002631 * (1.55153254691 +  154.01661525950 * t).Cos();
		rtn += 0.00000002555 * (2.97023907145 +  378.64329525170 * t).Cos();
		rtn += 0.00000002485 * (3.55433846990 +   96.87299909510 * t).Cos();
		rtn += 0.00000002480 * (0.63321072542 +  187.69623277240 * t).Cos();
		rtn += 0.00000002474 * (3.81319259323 +    7.11354700080 * t).Cos();
		rtn += 0.00000002394 * (2.21483198491 +   54.17467074780 * t).Cos();
		rtn += 0.00000002206 * (3.06995275892 +   59.80374504030 * t).Cos();
		rtn += 0.00000002071 * (1.97429082033 +   18.15924726470 * t).Cos();
		rtn += 0.00000002061 * (4.50102695788 +    5.93789083320 * t).Cos();
		rtn += 0.00000002039 * (2.97351088965 +  191.20769491020 * t).Cos();
		rtn += 0.00000001916 * (1.60538526374 +   80.19822453870 * t).Cos();
		rtn += 0.00000001857 * (1.66304484985 +  984.60033162190 * t).Cos();
		rtn += 0.00000001833 * (1.95824865568 +   81.89514556810 * t).Cos();
		rtn += 0.00000001766 * (5.24239122261 +  105.49227066360 * t).Cos();
		rtn += 0.00000001745 * (3.22821992592 +  218.40690486870 * t).Cos();
		rtn += 0.00000001719 * (2.22526635038 +  479.28838891550 * t).Cos();
		rtn += 0.00000001711 * (3.44237080993 +  522.57741809380 * t).Cos();
		rtn += 0.00000001709 * (3.63188407264 +  554.06998748280 * t).Cos();
		rtn += 0.00000001614 * (3.39986066169 +  230.56457082540 * t).Cos();
		rtn += 0.00000001577 * (4.38020936720 +   80.71948940050 * t).Cos();
		rtn += 0.00000001524 * (6.05374020264 +   99.16062095550 * t).Cos();
		rtn += 0.00000001519 * (0.94716867229 +  372.42352012820 * t).Cos();
		rtn += 0.00000001504 * (1.34653259405 +   74.52096613640 * t).Cos();
		rtn += 0.00000001495 * (0.74986873597 +   75.04223099820 * t).Cos();
		rtn += 0.00000001398 * (0.33827838973 +  142.44965013380 * t).Cos();
		rtn += 0.00000001380 * (3.76141611602 +   92.94084583200 * t).Cos();
		rtn += 0.00000001374 * (4.39897993200 +  260.99335863140 * t).Cos();
		rtn += 0.00000001366 * (2.15288773765 +  162.09337010680 * t).Cos();
		rtn += 0.00000001364 * (4.56045715617 +   42.58645376270 * t).Cos();
		rtn += 0.00000001360 * (5.48691240270 +   74.82978267710 * t).Cos();
		rtn += 0.00000001360 * (2.89305157919 +   74.73341445750 * t).Cos();
		rtn += 0.00000001342 * (5.11117141196 +   51.20572533120 * t).Cos();
		rtn += 0.00000001278 * (4.53585702916 +  294.67297614430 * t).Cos();
		rtn += 0.00000001269 * (0.84167691738 +  767.36908292080 * t).Cos();
		rtn += 0.00000001263 * (2.87116663203 +   74.62153987290 * t).Cos();
		rtn += 0.00000001260 * (5.50922979275 +   74.94165726170 * t).Cos();
		rtn += 0.00000001248 * (3.13312504066 +   67.35923502580 * t).Cos();
		rtn += 0.00000001244 * (4.97789913094 +  149.45132255000 * t).Cos();
		rtn += 0.00000001238 * (1.73023505315 +  149.67507171920 * t).Cos();
		rtn += 0.00000001207 * (3.67288675913 +   20.60692781950 * t).Cos();
		rtn += 0.00000001181 * (4.39598416757 +  180.27386923090 * t).Cos();
		rtn += 0.00000001180 * (0.79882196802 +  116.42609634290 * t).Cos();
		rtn += 0.00000001113 * (3.87133607367 +   39.35687591520 * t).Cos();
		rtn += 0.00000001021 * (1.79905869707 +    3.18139373770 * t).Cos();
		rtn += 0.00000001018 * (6.20393099094 +  835.03713448730 * t).Cos();
		rtn += 0.00000001001 * (5.49914631698 +  256.53994050650 * t).Cos();
		rtn += 0.00000000999 * (0.33400530567 +  404.50679034820 * t).Cos();
		rtn += 0.00000000970 * (1.71236273285 +  115.88357962170 * t).Cos();
		rtn += 0.00000000962 * (3.30343472839 +  255.05546779820 * t).Cos();
		rtn += 0.00000000956 * (5.76811833839 +  128.95626931510 * t).Cos();
		rtn += 0.00000000952 * (3.00456073496 +   14.97785352700 * t).Cos();
		rtn += 0.00000000921 * (3.07729879788 +    8.07675484730 * t).Cos();
		rtn += 0.00000000914 * (0.00764291274 +  536.80451209540 * t).Cos();
		rtn += 0.00000000911 * (6.23753038018 +  200.76892246580 * t).Cos();
		rtn += 0.00000000800 * (3.20912932090 +   28.31117565130 * t).Cos();
		rtn += 0.00000000799 * (4.11425365829 +  125.98732389850 * t).Cos();
		rtn += 0.00000000798 * (0.90969731665 +  152.01087768940 * t).Cos();
		rtn += 0.00000000774 * (0.42035450706 +  565.11568774670 * t).Cos();
		rtn += 0.00000000765 * (3.45454533660 +  214.78356814630 * t).Cos();
		rtn += 0.00000000749 * (5.56828487823 +    2.44768055480 * t).Cos();
		rtn += 0.00000000747 * (5.07639466593 +   89.75945209430 * t).Cos();
		rtn += 0.00000000730 * (2.25510749124 +  453.42489381900 * t).Cos();
		rtn += 0.00000000723 * (4.75905991606 +  331.32153907380 * t).Cos();
		rtn += 0.00000000715 * (5.56313177065 +  146.38180339690 * t).Cos();
		rtn += 0.00000000706 * (5.80210566917 +  157.63995198190 * t).Cos();
		rtn += 0.00000000705 * (2.94649553712 +   60.76695288680 * t).Cos();
		rtn += 0.00000000691 * (3.58561635364 +  362.86229257260 * t).Cos();
		rtn += 0.00000000689 * (1.84748347121 +   41.64449777560 * t).Cos();
		rtn += 0.00000000682 * (5.16479782395 +   74.03083904190 * t).Cos();
		rtn += 0.00000000673 * (2.65544175682 +   75.53235809270 * t).Cos();
		rtn += 0.00000000671 * (5.96862039131 +  135.54855145410 * t).Cos();
		rtn += 0.00000000663 * (5.32574112049 +  142.14083359310 * t).Cos();
		rtn += 0.00000000651 * (2.80626026285 +   50.40257617910 * t).Cos();
		rtn += 0.00000000650 * (4.56215718085 +  216.92243216040 * t).Cos();
		rtn += 0.00000000649 * (5.74895589744 +  141.48644228730 * t).Cos();
		rtn += 0.00000000641 * (5.77408891198 +  110.20632121940 * t).Cos();
		rtn += 0.00000000631 * (1.97807297205 +  639.89728631400 * t).Cos();
		rtn += 0.00000000612 * (2.01741578932 +  195.13984817330 * t).Cos();
		rtn += 0.00000000593 * (5.40734033998 +  692.58748435350 * t).Cos();
		rtn += 0.00000000593 * (1.89556258897 +  203.73786788240 * t).Cos();
		rtn += 0.00000000585 * (4.67924542643 +   88.79624424780 * t).Cos();
		rtn += 0.00000000573 * (2.46311368783 +   81.00137369080 * t).Cos();
		rtn += 0.00000000554 * (2.78135114877 +   14.01464568050 * t).Cos();
		rtn += 0.00000000550 * (2.90625551534 +   68.18931642830 * t).Cos();
		rtn += 0.00000000548 * (3.75628845322 +  617.80588578620 * t).Cos();
		rtn += 0.00000000544 * (2.99910512780 +  152.74459087230 * t).Cos();
		rtn += 0.00000000536 * (1.82614772260 +  114.13847448250 * t).Cos();
		rtn += 0.00000000530 * (3.51385025328 +  291.70403072770 * t).Cos();
		rtn += 0.00000000517 * (4.97759795528 +  387.24131496080 * t).Cos();
		rtn += 0.00000000512 * (5.86200059955 +  293.18850343600 * t).Cos();
		rtn += 0.00000000506 * (4.94619342366 +   81.37388070630 * t).Cos();
		rtn += 0.00000000506 * (2.05348204197 +  373.01422095920 * t).Cos();
		rtn += 0.00000000501 * (4.79997295899 +  306.83064210100 * t).Cos();
		rtn += 0.00000000491 * (5.58913582973 +   68.56182344380 * t).Cos();
		rtn += 0.00000000485 * (6.21247575899 +    5.41662597140 * t).Cos();
		rtn += 0.00000000485 * (2.36317665443 +  448.68959140380 * t).Cos();
		rtn += 0.00000000481 * (5.81647231299 +  134.58534360760 * t).Cos();
		rtn += 0.00000000478 * (2.41106642594 +  358.93013930950 * t).Cos();
		rtn += 0.00000000475 * (0.53480492526 +  303.86169668440 * t).Cos();
		rtn += 0.00000000475 * (0.17507881032 +  120.35824960600 * t).Cos();
		rtn += 0.00000000474 * (3.03149617428 +  286.59622129700 * t).Cos();
		rtn += 0.00000000470 * (1.30184316812 +  228.27694896500 * t).Cos();
		rtn += 0.00000000468 * (0.55881267334 +   23.57587323610 * t).Cos();
		rtn += 0.00000000445 * (2.50076311432 +  905.88657979150 * t).Cos();
		rtn += 0.00000000432 * (4.20907682097 +  278.51946644970 * t).Cos();
		rtn += 0.00000000427 * (5.08349119654 +  367.97010200330 * t).Cos();
		rtn += 0.00000000418 * (5.21379084769 +   35.42472265210 * t).Cos();
		rtn += 0.00000000413 * (0.03813081773 +  103.09277421860 * t).Cos();
		rtn += 0.00000000410 * (5.30637634877 +   95.38852638680 * t).Cos();
		rtn += 0.00000000408 * (5.69107313998 +  284.14854074220 * t).Cos();
		rtn += 0.00000000407 * (2.00853504718 +  679.25416222920 * t).Cos();
		rtn += 0.00000000388 * (0.88856038803 +  483.22054217860 * t).Cos();
		rtn += 0.00000000387 * (0.56619310480 +  602.98809095360 * t).Cos();
		rtn += 0.00000000383 * (5.54541241459 +  419.48464387520 * t).Cos();
		rtn += 0.00000000381 * (4.61366060949 +  329.72519178090 * t).Cos();
		rtn += 0.00000000376 * (1.28856348513 +  155.78297225810 * t).Cos();
		rtn += 0.00000000369 * (1.82533858431 +  334.29048449040 * t).Cos();
		rtn += 0.00000000368 * (4.08526832792 + 1589.07289528380 * t).Cos();
		rtn += 0.00000000342 * (5.27187859255 +   28.57180808220 * t).Cos();
		rtn += 0.00000000328 * (3.47252263966 +   73.40900044360 * t).Cos();
		rtn += 0.00000000326 * (6.09140263554 +  456.39383923560 * t).Cos();
		rtn += 0.00000000324 * (5.57191515554 +  501.37978944330 * t).Cos();
		rtn += 0.00000000319 * (4.24219881040 +  328.35259365720 * t).Cos();
		rtn += 0.00000000318 * (0.09996195379 +   69.36497259590 * t).Cos();
		rtn += 0.00000000309 * (1.97045147502 +  543.02428721890 * t).Cos();
		rtn += 0.00000000308 * (3.50154864071 +   30.71067209630 * t).Cos();
		rtn += 0.00000000304 * (5.68101077712 +  189.18070548070 * t).Cos();
		rtn += 0.00000000299 * (6.04121646505 +  332.80601178210 * t).Cos();
		rtn += 0.00000000293 * (5.44464406156 +  477.91579079180 * t).Cos();
		rtn += 0.00000000292 * (5.11578046796 +  375.39246554480 * t).Cos();
		rtn += 0.00000000289 * (3.85492516765 +  209.36694217490 * t).Cos();
		rtn += 0.00000000283 * (1.88910019831 +   24.37902238820 * t).Cos();
		rtn += 0.00000000283 * (1.81773059325 +  647.01083331480 * t).Cos();
		rtn += 0.00000000278 * (3.85507901929 +  760.25553592000 * t).Cos();
		rtn += 0.00000000273 * (4.22941219477 +  391.17346822390 * t).Cos();
		rtn += 0.00000000267 * (0.15744446718 + 0213.28554621100 * t).Cos();
		rtn += 0.00000000259 * (2.78974616768 +  144.14657116320 * t).Cos();
		rtn += 0.00000000248 * (6.19516038159 + 1134.16352875650 * t).Cos();
		rtn += 0.00000000248 * (2.17741598681 +  611.58611066270 * t).Cos();
		rtn += 0.00000000246 * (6.15106498377 +    6.21977512350 * t).Cos();
		rtn += 0.00000000245 * (4.69742022955 +  316.39186965660 * t).Cos();
		rtn += 0.00000000245 * (1.04008534095 + 1332.48477066750 * t).Cos();
		rtn += 0.00000000244 * (6.00644853640 +  295.19424100610 * t).Cos();
		rtn += 0.00000000242 * (1.37720813333 +  121.25202148330 * t).Cos();
		rtn += 0.00000000233 * (0.50933224249 +  462.02291352810 * t).Cos();
		rtn += 0.00000000228 * (2.33602531859 +  150.52640498110 * t).Cos();
		rtn += 0.00000000228 * (0.72608678727 +  233.90602325750 * t).Cos();
		rtn += 0.00000000226 * (0.72248476212 +   45.57665103870 * t).Cos();
		rtn += 0.00000000224 * (3.04829549918 + 1439.50969814920 * t).Cos();
		rtn += 0.00000000223 * (5.35785607671 +  983.11585891360 * t).Cos();
		rtn += 0.00000000223 * (2.04168197187 +  370.93904741990 * t).Cos();
		rtn += 0.00000000217 * (4.33845164683 +  269.92144674060 * t).Cos();
		rtn += 0.00000000210 * (5.84975171904 +  147.11551657980 * t).Cos();
		rtn += 0.00000000207 * (6.13936312021 +  344.70304530790 * t).Cos();
		rtn += 0.00000000203 * (2.38070591912 +  275.55052103310 * t).Cos();
		rtn += 0.00000000202 * (1.37341689387 +  302.09533968580 * t).Cos();
		rtn += 0.00000000199 * (3.21010368905 +    7.42236354150 * t).Cos();
		rtn += 0.00000000194 * (5.11344829813 + 1215.16490244730 * t).Cos();
		rtn += 0.00000000186 * (3.85070006482 +   46.20979048510 * t).Cos();
		rtn += 0.00000000181 * (0.39521867351 +    0.96320784650 * t).Cos();
		rtn += 0.00000000180 * (4.70377036870 +  518.64526483070 * t).Cos();
		rtn += 0.00000000175 * (3.72163733058 +  150.08446199640 * t).Cos();
		rtn += 0.00000000166 * (3.24028819042 +  173.94221952280 * t).Cos();
		rtn += 0.00000000165 * (1.87245210311 +  310.17209453310 * t).Cos();
		rtn += 0.00000000144 * (1.78180338482 +  531.17543780290 * t).Cos();
		rtn += 0.00000000141 * (4.02238453909 +  350.33211960040 * t).Cos();
		rtn += 0.00000000137 * (6.20635855175 +  369.45457471160 * t).Cos();
		rtn += 0.00000000136 * (4.00164375048 +  526.72201967800 * t).Cos();
		rtn += 0.00000000134 * (3.97421067761 +  228.79821382680 * t).Cos();
		rtn += 0.00000000133 * (3.16576403244 +  262.47783133970 * t).Cos();
		rtn += 0.00000000132 * (4.52023845365 +  148.59998928810 * t).Cos();
		rtn += 0.00000000125 * (5.28865037145 +  329.83706636550 * t).Cos();
		rtn += 0.00000000125 * (4.24724390191 +  248.72381809010 * t).Cos();
		rtn += 0.00000000120 * (4.08565783859 +  154.97982310600 * t).Cos();
		return rtn;
	}

	// MUranus.B1(EPrecision, double)
	/// <summary>
	/// Liefert die Summe der Terme 1. Ordnung zur Genauigkeitskennung und Jahrhundertbruchteil.
	/// </summary>
	/// <param name="value">Genauigkeitskennung.</param>
	/// <param name="t">Jahrhundertbruchteil.</param>
	/// <returns>Liefert die Summe der Terme 1. Ordnung.</returns>
	private static double B1(EPrecision value, double t)
	{
		// Lokale Felder einrichten
		double rtn = 0.0;

		// Terme aufsummieren
		rtn += 0.00206366162 * (4.12394311407 +  74.78159856730 * t).Cos();
		if(value == EPrecision.Low)
			return rtn;
		rtn += 0.00008563230 * (0.33819986165 + 149.56319713460 * t).Cos();
		rtn += 0.00001725703 * (2.12193159895 +  73.29712585900 * t).Cos();
		rtn += 0.00001374449 * (0.00000000000 +   0.00000000000 * t).Cos();
		rtn += 0.00001368860 * (3.06861722047 +  76.26607127560 * t).Cos();
		rtn += 0.00000450639 * (3.77656180977 +   1.48447270830 * t).Cos();
		rtn += 0.00000399847 * (2.84767037795 + 224.34479570190 * t).Cos();
		rtn += 0.00000307214 * (1.25456766737 + 148.07872442630 * t).Cos();
		rtn += 0.00000154336 * (3.78575467747 +  63.73589830340 * t).Cos();
		rtn += 0.00000112432 * (5.57299891505 + 151.04766984290 * t).Cos();
		rtn += 0.00000110888 * (5.32888676461 + 138.51749687070 * t).Cos();
		rtn += 0.00000083493 * (3.59152795558 +  71.81265315070 * t).Cos();
		rtn += 0.00000055573 * (3.40135416354 +  85.82729883120 * t).Cos();
		rtn += 0.00000053690 * (1.70455769943 +  77.75054398390 * t).Cos();
		if(value == EPrecision.Medium)
			return rtn;
		rtn += 0.00000041912 * (1.21476607434 +  11.04570026390 * t).Cos();
		rtn += 0.00000041377 * (4.45476669141 +  78.71375183040 * t).Cos();
		rtn += 0.00000031959 * (3.77446207748 + 222.86032299360 * t).Cos();
		rtn += 0.00000030297 * (2.56371683644 +   2.96894541660 * t).Cos();
		rtn += 0.00000026977 * (5.33695500294 + 213.29909543800 * t).Cos();
		rtn += 0.00000026222 * (0.41620628369 + 380.12776796000 * t).Cos();
		rtn += 0.00000022992 * (2.48887389394 + 146.59425171800 * t).Cos();
		rtn += 0.00000020408 * (3.70179681605 +  70.84944530420 * t).Cos();
		rtn += 0.00000020094 * (5.93085633510 + 529.69096509460 * t).Cos();
		rtn += 0.00000019590 * (5.37213500014 + 299.12639426920 * t).Cos();
		rtn += 0.00000019411 * (3.83015453768 +  38.13303563780 * t).Cos();
		rtn += 0.00000019102 * (1.09213276596 + 111.43016149680 * t).Cos();
		rtn += 0.00000010847 * (2.66326308043 +   3.93215326310 * t).Cos();
		rtn += 0.00000010249 * (2.31278807720 + 109.94568878850 * t).Cos();
		rtn += 0.00000009405 * (2.76950513184 +  39.61750834610 * t).Cos();
		rtn += 0.00000008082 * (4.69064168719 + 184.72728735580 * t).Cos();
		rtn += 0.00000007660 * (1.81108462850 + 225.82926841020 * t).Cos();
		rtn += 0.00000007410 * (1.17879753422 +  65.22037101170 * t).Cos();
		rtn += 0.00000006584 * (5.50417589189 +  35.16409022120 * t).Cos();
		rtn += 0.00000006451 * (4.98294064391 +  71.60020482960 * t).Cos();
		rtn += 0.00000006089 * (1.31830108565 +  52.69019803950 * t).Cos();
		rtn += 0.00000004894 * (6.01164167429 + 160.60889739850 * t).Cos();
		rtn += 0.00000004840 * (4.86390682412 + 221.37585028530 * t).Cos();
		rtn += 0.00000004768 * (5.90574941745 + 145.63104387150 * t).Cos();
		rtn += 0.00000004711 * (4.24289069791 + 152.53214255120 * t).Cos();
		rtn += 0.00000004192 * (3.29643787103 +  77.96299230500 * t).Cos();
		rtn += 0.00000003758 * (3.94715595219 + 351.81659230870 * t).Cos();
		rtn += 0.00000003738 * (4.75287390209 +  70.32818044240 * t).Cos();
		rtn += 0.00000003481 * (0.64108927026 + 153.49535039770 * t).Cos();
		rtn += 0.00000003114 * (0.10537144899 + 112.91463420510 * t).Cos();
		rtn += 0.00000002788 * (4.24118032837 +  74.66972398270 * t).Cos();
		rtn += 0.00000002661 * (0.53230319176 +  79.23501669220 * t).Cos();
		rtn += 0.00000002563 * (4.15665405963 + 305.34616939270 * t).Cos();
		rtn += 0.00000002544 * (5.25903565788 +  56.62235130260 * t).Cos();
		rtn += 0.00000002541 * (0.40106060407 +  77.22927912210 * t).Cos();
		rtn += 0.00000002505 * (0.04576283378 + 297.64192156090 * t).Cos();
		rtn += 0.00000002299 * (3.57748029365 + 186.21176006410 * t).Cos();
		rtn += 0.00000002265 * (1.41055702214 +   4.45341812490 * t).Cos();
		rtn += 0.00000002247 * (4.24726481845 +  36.64856292950 * t).Cos();
		rtn += 0.00000002212 * (2.88960413468 + 277.03499374140 * t).Cos();
		rtn += 0.00000002157 * (2.10150995852 + 127.47179660680 * t).Cos();
		rtn += 0.00000002103 * (4.27438518414 +  22.09140052780 * t).Cos();
		rtn += 0.00000001861 * (3.75619999278 + 145.10977900970 * t).Cos();
		rtn += 0.00000001759 * (2.10240976488 + 131.40394986990 * t).Cos();
		rtn += 0.00000001661 * (4.84483054269 +  62.25142559510 * t).Cos();
		rtn += 0.00000001659 * (5.86539712478 + 454.90936652730 * t).Cos();
		rtn += 0.00000001522 * (1.00801468633 +  75.74480641380 * t).Cos();
		rtn += 0.00000001496 * (1.72084298116 + 220.41264243880 * t).Cos();
		rtn += 0.00000001495 * (5.55621838458 +  67.66805156650 * t).Cos();
		rtn += 0.00000001463 * (5.14953143442 +  84.34282612290 * t).Cos();
		rtn += 0.00000001459 * (6.17427145114 + 426.59819087600 * t).Cos();
		rtn += 0.00000001453 * (2.22988903923 + 206.18554843720 * t).Cos();
		rtn += 0.00000001439 * (0.99170994448 +  74.89347315190 * t).Cos();
		rtn += 0.00000001428 * (0.31508367934 + 137.03302416240 * t).Cos();
		rtn += 0.00000001405 * (2.43582184515 +  87.31177153950 * t).Cos();
		rtn += 0.00000001358 * (5.85111427068 + 183.24281464750 * t).Cos();
		rtn += 0.00000001317 * (1.91178535183 + 140.00196957900 * t).Cos();
		rtn += 0.00000001189 * (0.90595784409 +  33.67961751290 * t).Cos();
		rtn += 0.00000001096 * (1.63909426062 +  41.10198105440 * t).Cos();
		rtn += 0.00000001068 * (1.51430678116 + 373.90799283650 * t).Cos();
		rtn += 0.00000001065 * (4.15616015505 + 288.08069400530 * t).Cos();
		rtn += 0.00000000961 * (5.48175535705 + 490.33408917940 * t).Cos();
		rtn += 0.00000000881 * (4.31294603221 +   9.56122755560 * t).Cos();
		rtn += 0.00000000879 * (1.82006610038 +  73.81839072080 * t).Cos();
		rtn += 0.00000000872 * (0.30134022304 +  12.53017297220 * t).Cos();
		rtn += 0.00000000860 * (0.21225398802 +   3.18139373770 * t).Cos();
		rtn += 0.00000000851 * (0.95029849401 + 909.81873305460 * t).Cos();
		rtn += 0.00000000822 * (0.01949759759 +  18.15924726470 * t).Cos();
		rtn += 0.00000000820 * (0.78610123063 + 259.50888592310 * t).Cos();
		rtn += 0.00000000786 * (5.18884635415 + 114.39910691340 * t).Cos();
		rtn += 0.00000000727 * (0.02846968582 +  66.70484372000 * t).Cos();
		rtn += 0.00000000709 * (3.18853632737 +  80.19822453870 * t).Cos();
		rtn += 0.00000000708 * (0.00007309836 +  81.89514556810 * t).Cos();
		rtn += 0.00000000656 * (6.16899483115 +  96.87299909510 * t).Cos();
		rtn += 0.00000000637 * (2.64378420008 +  75.30286342910 * t).Cos();
		rtn += 0.00000000635 * (2.21125075603 +  74.26033370550 * t).Cos();
		rtn += 0.00000000622 * (2.21801944850 + 211.81462272970 * t).Cos();
		rtn += 0.00000000611 * (0.97629869063 + 296.15744885260 * t).Cos();
		rtn += 0.00000000610 * (6.07202921132 + 219.89137757700 * t).Cos();
		rtn += 0.00000000600 * (4.42462853209 + 415.55249061210 * t).Cos();
		rtn += 0.00000000590 * (4.17885957237 + 300.61086697750 * t).Cos();
		rtn += 0.00000000529 * (2.35940463062 +   7.11354700080 * t).Cos();
		rtn += 0.00000000519 * (2.01872911223 + 142.44965013380 * t).Cos();
		rtn += 0.00000000509 * (5.83556856314 + 191.20769491020 * t).Cos();
		rtn += 0.00000000489 * (1.83419944488 +  92.94084583200 * t).Cos();
		rtn += 0.00000000456 * (2.44190834824 + 381.61224066830 * t).Cos();
		rtn += 0.00000000455 * (5.15414537021 + 522.57741809380 * t).Cos();
		rtn += 0.00000000445 * (2.51784247184 + 604.47256366190 * t).Cos();
		rtn += 0.00000000445 * (0.33164113115 + 227.31374111850 * t).Cos();
		rtn += 0.00000000419 * (2.80644155875 +  72.33391801250 * t).Cos();
		rtn += 0.00000000413 * (5.36482818305 +  82.85835341460 * t).Cos();
		rtn += 0.00000000378 * (1.91873737843 + 202.25339517410 * t).Cos();
		rtn += 0.00000000360 * (1.47248643716 + 378.64329525170 * t).Cos();
		rtn += 0.00000000353 * (0.48749845867 + 128.95626931510 * t).Cos();
		rtn += 0.00000000351 * (6.24769322491 +   5.93789083320 * t).Cos();
		rtn += 0.00000000338 * (2.84645768890 + 154.01661525950 * t).Cos();
		rtn += 0.00000000333 * (0.32014837950 +   2.44768055480 * t).Cos();
		rtn += 0.00000000323 * (4.90410549341 + 258.02441321480 * t).Cos();
		rtn += 0.00000000318 * (0.70176359510 + 181.75834193920 * t).Cos();
		rtn += 0.00000000315 * (2.44922921309 + 187.69623277240 * t).Cos();
		rtn += 0.00000000314 * (4.68400251693 +  14.97785352700 * t).Cos();
		rtn += 0.00000000306 * (0.15517399606 + 159.12442469020 * t).Cos();
		rtn += 0.00000000301 * (4.46417652272 + 536.80451209540 * t).Cos();
		rtn += 0.00000000298 * (1.71815652029 + 235.39049596580 * t).Cos();
		rtn += 0.00000000297 * (1.16538119842 + 146.38180339690 * t).Cos();
		rtn += 0.00000000288 * (4.42249612833 + 195.13984817330 * t).Cos();
		rtn += 0.00000000282 * (3.70093718573 + 108.46121608020 * t).Cos();
		rtn += 0.00000000280 * (1.73679618032 + 265.98929347750 * t).Cos();
		rtn += 0.00000000275 * (5.35665949805 +  80.71948940050 * t).Cos();
		rtn += 0.00000000273 * (3.29483889428 + 387.24131496080 * t).Cos();
		rtn += 0.00000000272 * (3.91340553608 + 617.80588578620 * t).Cos();
		rtn += 0.00000000257 * (1.82441994046 + 230.56457082540 * t).Cos();
		rtn += 0.00000000253 * (2.63817804331 +  74.52096613640 * t).Cos();
		rtn += 0.00000000252 * (2.04143912495 +  75.04223099820 * t).Cos();
		rtn += 0.00000000250 * (1.23231297183 + 703.63318461740 * t).Cos();
		rtn += 0.00000000248 * (4.90614051989 +  41.64449777560 * t).Cos();
		rtn += 0.00000000234 * (0.27679874465 +  33.13710079170 * t).Cos();
		rtn += 0.00000000229 * (4.18462288684 +  74.73341445750 * t).Cos();
		rtn += 0.00000000229 * (0.49529839431 +  74.82978267710 * t).Cos();
		rtn += 0.00000000213 * (4.16218259902 +  74.62153987290 * t).Cos();
		rtn += 0.00000000213 * (2.29528235429 +  32.19514480460 * t).Cos();
		rtn += 0.00000000212 * (0.51761494342 +  74.94165726170 * t).Cos();
		rtn += 0.00000000201 * (4.54140547837 +  20.60692781950 * t).Cos();
		rtn += 0.00000000194 * (4.17282454759 + 116.42609634290 * t).Cos();
		rtn += 0.00000000194 * (0.06960211137 +  42.58645376270 * t).Cos();
		rtn += 0.00000000174 * (3.15418942153 + 228.27694896500 * t).Cos();
		rtn += 0.00000000173 * (5.59700344643 +  68.84370773410 * t).Cos();
		rtn += 0.00000000159 * (4.91721631097 + 143.62530630140 * t).Cos();
		rtn += 0.00000000154 * (4.18369977366 +  39.35687591520 * t).Cos();
		rtn += 0.00000000150 * (0.92771324396 + 404.50679034820 * t).Cos();
		rtn += 0.00000000146 * (5.08207330360 + 294.67297614430 * t).Cos();
		rtn += 0.00000000136 * (2.51083022906 + 372.42352012820 * t).Cos();
		rtn += 0.00000000134 * (3.22507836958 + 479.28838891550 * t).Cos();
		rtn += 0.00000000124 * (0.42063711585 + 149.45132255000 * t).Cos();
		rtn += 0.00000000122 * (1.20639876458 +   5.41662597140 * t).Cos();
		rtn += 0.00000000121 * (6.08239076370 + 260.99335863140 * t).Cos();
		rtn += 0.00000000121 * (2.13544759505 + 209.36694217490 * t).Cos();
		rtn += 0.00000000119 * (0.45375065997 +  74.03083904190 * t).Cos();
		rtn += 0.00000000118 * (4.22640788890 +  75.53235809270 * t).Cos();
		rtn += 0.00000000118 * (1.50613822829 + 344.70304530790 * t).Cos();
		return rtn;
	}

	// MUranus.B2(EPrecision, double)
	/// <summary>
	/// Liefert die Summe der Terme 2. Ordnung zur Genauigkeitskennung und Jahrhundertbruchteil.
	/// </summary>
	/// <param name="value">Genauigkeitskennung.</param>
	/// <param name="t">Jahrhundertbruchteil.</param>
	/// <returns>Liefert die Summe der Terme 2. Ordnung.</returns>
	private static double B2(EPrecision value, double t)
	{
		// Lokale Felder einrichten
		double rtn = 0.0;
		if(value == EPrecision.Low)
			return rtn;

		// Terme aufsummieren
		rtn += 0.00009211656 * (5.80044305785 +  74.78159856730 * t).Cos();
		rtn += 0.00000556926 * (0.00000000000 +   0.00000000000 * t).Cos();
		rtn += 0.00000286265 * (2.17729776353 + 149.56319713460 * t).Cos();
		rtn += 0.00000094969 * (3.84237569809 +  73.29712585900 * t).Cos();
		if(value == EPrecision.Medium)
			return rtn;
		rtn += 0.00000045419 * (4.87822046064 +  76.26607127560 * t).Cos();
		rtn += 0.00000020107 * (5.46264485369 +   1.48447270830 * t).Cos();
		rtn += 0.00000014793 * (0.87983715652 + 138.51749687070 * t).Cos();
		rtn += 0.00000014261 * (2.84517742687 + 148.07872442630 * t).Cos();
		rtn += 0.00000013963 * (5.07234043994 +  63.73589830340 * t).Cos();
		rtn += 0.00000010122 * (5.00290894862 + 224.34479570190 * t).Cos();
		rtn += 0.00000008299 * (6.26655615197 +  78.71375183040 * t).Cos();
		rtn += 0.00000004729 * (5.16274174929 +  71.81265315070 * t).Cos();
		rtn += 0.00000003816 * (6.28224514574 +  85.82729883120 * t).Cos();
		rtn += 0.00000003488 * (3.53472172445 +  11.04570026390 * t).Cos();
		rtn += 0.00000002585 * (0.41383633246 +  71.60020482960 * t).Cos();
		rtn += 0.00000002555 * (1.44444215715 + 151.04766984290 * t).Cos();
		rtn += 0.00000002353 * (4.23069776466 +   3.93215326310 * t).Cos();
		rtn += 0.00000001394 * (4.13126838571 + 146.59425171800 * t).Cos();
		rtn += 0.00000001205 * (5.05109252937 + 380.12776796000 * t).Cos();
		rtn += 0.00000001183 * (3.68471361409 +  77.75054398390 * t).Cos();
		rtn += 0.00000001146 * (1.95280464754 + 529.69096509460 * t).Cos();
		rtn += 0.00000001103 * (5.54212014132 + 222.86032299360 * t).Cos();
		rtn += 0.00000001025 * (4.33698643491 +   2.96894541660 * t).Cos();
		rtn += 0.00000000977 * (1.52652616357 +  77.96299230500 * t).Cos();
		rtn += 0.00000000868 * (5.55175791193 +  38.13303563780 * t).Cos();
		rtn += 0.00000000858 * (2.78728745263 + 111.43016149680 * t).Cos();
		rtn += 0.00000000633 * (0.41074353315 + 213.29909543800 * t).Cos();
		rtn += 0.00000000596 * (5.39265533517 + 127.47179660680 * t).Cos();
		rtn += 0.00000000586 * (4.00404667232 + 109.94568878850 * t).Cos();
		rtn += 0.00000000557 * (3.13408880388 +  65.22037101170 * t).Cos();
		rtn += 0.00000000543 * (2.40369406419 + 153.49535039770 * t).Cos();
		rtn += 0.00000000486 * (2.05237757516 + 299.12639426920 * t).Cos();
		rtn += 0.00000000481 * (2.81511187371 + 160.60889739850 * t).Cos();
		rtn += 0.00000000457 * (3.96543219832 + 454.90936652730 * t).Cos();
		rtn += 0.00000000421 * (2.16819778071 +  56.62235130260 * t).Cos();
		rtn += 0.00000000338 * (5.14594268587 +   3.18139373770 * t).Cos();
		rtn += 0.00000000336 * (4.23512034174 +  35.16409022120 * t).Cos();
		rtn += 0.00000000326 * (4.52920012430 +  39.61750834610 * t).Cos();
		rtn += 0.00000000316 * (3.93430525759 +  52.69019803950 * t).Cos();
		rtn += 0.00000000308 * (6.26508780547 +  70.32818044240 * t).Cos();
		rtn += 0.00000000306 * (1.10359318443 +  70.84944530420 * t).Cos();
		rtn += 0.00000000288 * (0.47061435406 +  22.09140052780 * t).Cos();
		rtn += 0.00000000264 * (1.82574036051 +  77.22927912210 * t).Cos();
		rtn += 0.00000000263 * (1.59203582407 +  84.34282612290 * t).Cos();
		rtn += 0.00000000250 * (3.58780257084 + 202.25339517410 * t).Cos();
		rtn += 0.00000000239 * (4.77679306080 +  87.31177153950 * t).Cos();
		rtn += 0.00000000227 * (2.74138067839 +  12.53017297220 * t).Cos();
		rtn += 0.00000000222 * (0.04111883550 + 184.72728735580 * t).Cos();
		rtn += 0.00000000216 * (5.80700510713 +  74.66972398270 * t).Cos();
		rtn += 0.00000000215 * (3.88195737361 + 131.40394986990 * t).Cos();
		rtn += 0.00000000197 * (1.56602555362 +   9.56122755560 * t).Cos();
		rtn += 0.00000000193 * (2.26416938160 +  75.74480641380 * t).Cos();
		rtn += 0.00000000179 * (2.69065316892 + 145.63104387150 * t).Cos();
		rtn += 0.00000000174 * (4.76111441901 + 277.03499374140 * t).Cos();
		rtn += 0.00000000170 * (2.75844544119 +  73.81839072080 * t).Cos();
		rtn += 0.00000000155 * (3.55393249110 +  18.15924726470 * t).Cos();
		rtn += 0.00000000140 * (0.28714762870 + 221.37585028530 * t).Cos();
		rtn += 0.00000000134 * (1.29065526326 + 206.18554843720 * t).Cos();
		rtn += 0.00000000127 * (6.17908901556 +  62.25142559510 * t).Cos();
		rtn += 0.00000000116 * (6.26646620658 + 220.41264243880 * t).Cos();
		return rtn;
	}

	// MUranus.B3(EPrecision, double)
	/// <summary>
	/// Liefert die Summe der Terme 3. Ordnung zur Genauigkeitskennung und Jahrhundertbruchteil.
	/// </summary>
	/// <param name="value">Genauigkeitskennung.</param>
	/// <param name="t">Jahrhundertbruchteil.</param>
	/// <returns>Liefert die Summe der Terme 3. Ordnung.</returns>
	private static double B3(EPrecision value, double t)
	{
		// Lokale Felder einrichten
		double rtn = 0.0;
		if(value == EPrecision.Low)
			return rtn;

		// Terme aufsummieren
		rtn += 0.00000267832 * (1.25097888291 +  74.78159856730 * t).Cos();
		if(value == EPrecision.Medium)
			return rtn;
		rtn += 0.00000011048 * (3.14159265359 +   0.00000000000 * t).Cos();
		rtn += 0.00000006154 * (4.00663614486 + 149.56319713460 * t).Cos();
		rtn += 0.00000003361 * (5.77804694935 +  73.29712585900 * t).Cos();
		rtn += 0.00000001602 * (1.05657834344 +  63.73589830340 * t).Cos();
		rtn += 0.00000001265 * (1.66795295537 +  78.71375183040 * t).Cos();
		rtn += 0.00000001183 * (2.58856450374 + 138.51749687070 * t).Cos();
		rtn += 0.00000001087 * (0.28687213135 +  76.26607127560 * t).Cos();
		rtn += 0.00000000640 * (1.87238784591 +  71.60020482960 * t).Cos();
		rtn += 0.00000000590 * (0.80206040001 +   1.48447270830 * t).Cos();
		rtn += 0.00000000467 * (4.42872012006 + 148.07872442630 * t).Cos();
		rtn += 0.00000000272 * (4.00684090176 +  85.82729883120 * t).Cos();
		rtn += 0.00000000203 * (0.60406901282 +  71.81265315070 * t).Cos();
		rtn += 0.00000000180 * (5.55657564049 +   3.93215326310 * t).Cos();
		rtn += 0.00000000170 * (2.93672195979 +  11.04570026390 * t).Cos();
		rtn += 0.00000000168 * (4.67745630044 +  70.84944530420 * t).Cos();
		return rtn;
	}

	// MUranus.B4(EPrecision, double)
	/// <summary>
	/// Liefert die Summe der Terme 4. Ordnung zur Genauigkeitskennung und Jahrhundertbruchteil.
	/// </summary>
	/// <param name="value">Genauigkeitskennung.</param>
	/// <param name="t">Jahrhundertbruchteil.</param>
	/// <returns>Liefert die Summe der Terme 4. Ordnung.</returns>
	private static double B4(EPrecision value, double t)
	{
		// Lokale Felder einrichten
		double rtn = 0.0;
		if(value == EPrecision.Low)
			return rtn;
		if(value == EPrecision.Medium)
			return rtn;

		// Terme aufsummieren
		rtn += 0.00000005719 * (2.85499529315 + 74.78159856730 * t).Cos();
		rtn += 0.00000000300 * (3.14159265359 +  0.00000000000 * t).Cos();
		return rtn;
	}

	// MUranus.Latitude(EPrecision)
	/// <summary>
	/// Liefert die heliozentrisch-ekliptikale Breite zur aktuellen Systemzeit.
	/// </summary>
	/// <param name="value">Genauigkeitskennung.</param>
	/// <returns>Heliozentrisch-ekliptikale Breite zur aktuellen Systemzeit.</returns>
	public static double Latitude(EPrecision value)
	{
		// Lokale Felder einrichten
		double jd = DateTime.Now.ToJdn();
		return MUranus.Latitude(value, jd);
	}

	// MUranus.Latitude(EPrecision, double)
	/// <summary>
	/// Liefert die heliozentrisch-ekliptikale Breite zur julianischen Tageszahl.
	/// </summary>
	/// <param name="value">Genauigkeitskennung.</param>
	/// <param name="jd">Julianische Tageszahl.</param>
	/// <returns>Heliozentrisch-ekliptikale Breite zur julianischen Tageszahl.</returns>
	public static double Latitude(EPrecision value, double jd)
	{
		// Lokale Felder einrichten
		double t  = (jd - MCalendar.Jdn20000101) / 365250.0; // Jahrhundertbruchteil
		double b0 = MUranus.B0(value, t);
		double b1 = MUranus.B1(value, t);
		double b2 = MUranus.B2(value, t);
		double b3 = MUranus.B3(value, t);
		double b4 = MUranus.B4(value, t);

		// Breite berechnen
		return MMath.Polynome(t, b0, b1, b2, b3, b4);
	}
}
